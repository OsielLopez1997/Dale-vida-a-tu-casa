
ProyectoParte1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000332  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002de  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000332  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000364  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008cc  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007b3  00000000  00000000  00000cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000477  00000000  00000000  0000146b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  000018e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000040f  00000000  00000000  0000193c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d8  00000000  00000000  00001d4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001e23  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 7b 00 	call	0xf6	; 0xf6 <main>
  78:	0c 94 6d 01 	jmp	0x2da	; 0x2da <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <ADC_init>:
#include "ADC.h"

void ADC_init()
{
	// Output adjust = right //
	ADMUX &=~ (1<<ADLAR);
  80:	ec e7       	ldi	r30, 0x7C	; 124
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	8f 7d       	andi	r24, 0xDF	; 223
  88:	80 83       	st	Z, r24

	// Voltage Reference = AVCC //
	ADMUX |=  (1<<REFS0);
  8a:	80 81       	ld	r24, Z
  8c:	80 64       	ori	r24, 0x40	; 64
  8e:	80 83       	st	Z, r24
	ADMUX &=~ (1<<REFS1);
  90:	80 81       	ld	r24, Z
  92:	8f 77       	andi	r24, 0x7F	; 127
  94:	80 83       	st	Z, r24

	// Frequency divisor = 128 -> 16000/128 = 125 KHz
	ADCSRA |= (1<<ADPS0);
  96:	ea e7       	ldi	r30, 0x7A	; 122
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	81 60       	ori	r24, 0x01	; 1
  9e:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS1);
  a0:	80 81       	ld	r24, Z
  a2:	82 60       	ori	r24, 0x02	; 2
  a4:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS2);
  a6:	80 81       	ld	r24, Z
  a8:	84 60       	ori	r24, 0x04	; 4
  aa:	80 83       	st	Z, r24
  ac:	08 95       	ret

000000ae <ADC_GetData>:
}

int ADC_GetData(int canal)
{
	// Selección del canal del ADC //
	ADMUX &=~  0x0F;
  ae:	ec e7       	ldi	r30, 0x7C	; 124
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	90 81       	ld	r25, Z
  b4:	90 7f       	andi	r25, 0xF0	; 240
  b6:	90 83       	st	Z, r25
	ADMUX |=  canal;
  b8:	90 81       	ld	r25, Z
  ba:	89 2b       	or	r24, r25
  bc:	80 83       	st	Z, r24
	
	// Encendemos en ADC
	ADCSRA |= (1<<ADEN);
  be:	ea e7       	ldi	r30, 0x7A	; 122
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	80 68       	ori	r24, 0x80	; 128
  c6:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	83 e0       	ldi	r24, 0x03	; 3
  ca:	8a 95       	dec	r24
  cc:	f1 f7       	brne	.-4      	; 0xca <ADC_GetData+0x1c>
  ce:	00 00       	nop
	_delay_us(10);	// Esperamos a que caliente

	// Mandamos el muestreo
	ADCSRA |= (1<<ADSC);
  d0:	80 81       	ld	r24, Z
  d2:	80 64       	ori	r24, 0x40	; 64
  d4:	80 83       	st	Z, r24

	// Esperamos a que muestree, leyendo el flag
	while( !(ADCSRA & (1<<ADIF)) );
  d6:	80 81       	ld	r24, Z
  d8:	84 ff       	sbrs	r24, 4
  da:	fd cf       	rjmp	.-6      	; 0xd6 <ADC_GetData+0x28>
	ADCSRA |= (1<<ADIF);	// Reiniciamos el flag
  dc:	ea e7       	ldi	r30, 0x7A	; 122
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	80 61       	ori	r24, 0x10	; 16
  e4:	80 83       	st	Z, r24

	// Apagamos el ADC
	ADCSRA &=~ (1<<ADEN);
  e6:	80 81       	ld	r24, Z
  e8:	8f 77       	andi	r24, 0x7F	; 127
  ea:	80 83       	st	Z, r24

	return ADC;	
  ec:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
  f0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
}
  f4:	08 95       	ret

000000f6 <main>:
#include "util/delay.h"
#include "ADC.h"

int main(void){
	
	DDRB = 0xff;
  f6:	8f ef       	ldi	r24, 0xFF	; 255
  f8:	84 b9       	out	0x04, r24	; 4
	DDRD = 0x00;
  fa:	1a b8       	out	0x0a, r1	; 10
	DDRC |= (1<<DDC1);
  fc:	39 9a       	sbi	0x07, 1	; 7
	ADC_init();
  fe:	0e 94 40 00 	call	0x80	; 0x80 <ADC_init>
	
	TCCR1A = (1<<COM1A1)|(0<<COM1A0)|(0<<COM1B1)|(0<<COM1B0)|(1<<WGM11)|(0<<WGM00);
 102:	82 e8       	ldi	r24, 0x82	; 130
 104:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B = (0<<ICNC1)|(0<<ICES1)|(1<<WGM13)|(1<<WGM12)|(0<<CS12)|(1<<CS11)|(0<<CS10);
 108:	8a e1       	ldi	r24, 0x1A	; 26
 10a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	TCCR1C = (0<<FOC1A)|(0<<FOC1B);
 10e:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__DATA_REGION_ORIGIN__+0x22>
	TCNT1 = 0;
 112:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 116:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	OCR1A = 0;
 11a:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 11e:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	ICR1 = 27647;
 122:	8f ef       	ldi	r24, 0xFF	; 255
 124:	9b e6       	ldi	r25, 0x6B	; 107
 126:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
 12a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
	TIMSK1 = 0;
 12e:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
	TIFR1 = 0;
 132:	16 ba       	out	0x16, r1	; 22
	
	while (1){
		
		if (PIND & (1<<PIND0)){
			PORTB = (1<<PORTB2);
 134:	68 94       	set
 136:	dd 24       	eor	r13, r13
 138:	d2 f8       	bld	r13, 2
		if (PIND & (1<<PIND1)){
			PORTB &=~ (1<<PORTB2);
		}
		
		if (PIND & (1<<PIND2)){
			OCR1A = 4000;
 13a:	c8 e8       	ldi	r28, 0x88	; 136
 13c:	d0 e0       	ldi	r29, 0x00	; 0
 13e:	0f 2e       	mov	r0, r31
 140:	f0 ea       	ldi	r31, 0xA0	; 160
 142:	ef 2e       	mov	r14, r31
 144:	ff e0       	ldi	r31, 0x0F	; 15
 146:	ff 2e       	mov	r15, r31
 148:	f0 2d       	mov	r31, r0
			_delay_ms(5000);
			OCR1A = 1675;
 14a:	0b e8       	ldi	r16, 0x8B	; 139
 14c:	16 e0       	ldi	r17, 0x06	; 6
	TIMSK1 = 0;
	TIFR1 = 0;
	
	while (1){
		
		if (PIND & (1<<PIND0)){
 14e:	48 99       	sbic	0x09, 0	; 9
			PORTB = (1<<PORTB2);
 150:	d5 b8       	out	0x05, r13	; 5
		}
		if (PIND & (1<<PIND1)){
 152:	49 99       	sbic	0x09, 1	; 9
			PORTB &=~ (1<<PORTB2);
 154:	2a 98       	cbi	0x05, 2	; 5
		}
		
		if (PIND & (1<<PIND2)){
 156:	4a 9b       	sbis	0x09, 2	; 9
 158:	0d c0       	rjmp	.+26     	; 0x174 <main+0x7e>
			OCR1A = 4000;
 15a:	f9 82       	std	Y+1, r15	; 0x01
 15c:	e8 82       	st	Y, r14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15e:	2f ef       	ldi	r18, 0xFF	; 255
 160:	83 e2       	ldi	r24, 0x23	; 35
 162:	94 ef       	ldi	r25, 0xF4	; 244
 164:	21 50       	subi	r18, 0x01	; 1
 166:	80 40       	sbci	r24, 0x00	; 0
 168:	90 40       	sbci	r25, 0x00	; 0
 16a:	e1 f7       	brne	.-8      	; 0x164 <main+0x6e>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <main+0x78>
 16e:	00 00       	nop
			_delay_ms(5000);
			OCR1A = 1675;
 170:	19 83       	std	Y+1, r17	; 0x01
 172:	08 83       	st	Y, r16
		}
		
		
		float voltaje = ADC_GetData(0)*5/1024;
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 57 00 	call	0xae	; 0xae <ADC_GetData>
		if (voltaje > 2.0){
 17c:	bc 01       	movw	r22, r24
 17e:	66 0f       	add	r22, r22
 180:	77 1f       	adc	r23, r23
 182:	66 0f       	add	r22, r22
 184:	77 1f       	adc	r23, r23
 186:	86 0f       	add	r24, r22
 188:	97 1f       	adc	r25, r23
 18a:	99 23       	and	r25, r25
 18c:	14 f4       	brge	.+4      	; 0x192 <main+0x9c>
 18e:	81 50       	subi	r24, 0x01	; 1
 190:	9c 4f       	sbci	r25, 0xFC	; 252
 192:	bc 01       	movw	r22, r24
 194:	67 2f       	mov	r22, r23
 196:	77 0f       	add	r23, r23
 198:	77 0b       	sbc	r23, r23
 19a:	65 95       	asr	r22
 19c:	65 95       	asr	r22
 19e:	07 2e       	mov	r0, r23
 1a0:	00 0c       	add	r0, r0
 1a2:	88 0b       	sbc	r24, r24
 1a4:	99 0b       	sbc	r25, r25
 1a6:	0e 94 09 01 	call	0x212	; 0x212 <__floatsisf>
 1aa:	20 e0       	ldi	r18, 0x00	; 0
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	40 e0       	ldi	r20, 0x00	; 0
 1b0:	50 e4       	ldi	r21, 0x40	; 64
 1b2:	0e 94 44 01 	call	0x288	; 0x288 <__gesf2>
 1b6:	18 16       	cp	r1, r24
 1b8:	14 f4       	brge	.+4      	; 0x1be <main+0xc8>
			PORTC |= (1<<PORTC1);
 1ba:	41 9a       	sbi	0x08, 1	; 8
 1bc:	01 c0       	rjmp	.+2      	; 0x1c0 <main+0xca>
		}
		else{
			PORTC &=~ (1<<PORTC1);
 1be:	41 98       	cbi	0x08, 1	; 8
		}
		
		float v2 = ADC_GetData(2)*5/1024;
 1c0:	82 e0       	ldi	r24, 0x02	; 2
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 57 00 	call	0xae	; 0xae <ADC_GetData>
		if (v2 > 2.0){
 1c8:	bc 01       	movw	r22, r24
 1ca:	66 0f       	add	r22, r22
 1cc:	77 1f       	adc	r23, r23
 1ce:	66 0f       	add	r22, r22
 1d0:	77 1f       	adc	r23, r23
 1d2:	86 0f       	add	r24, r22
 1d4:	97 1f       	adc	r25, r23
 1d6:	99 23       	and	r25, r25
 1d8:	14 f4       	brge	.+4      	; 0x1de <main+0xe8>
 1da:	81 50       	subi	r24, 0x01	; 1
 1dc:	9c 4f       	sbci	r25, 0xFC	; 252
 1de:	bc 01       	movw	r22, r24
 1e0:	67 2f       	mov	r22, r23
 1e2:	77 0f       	add	r23, r23
 1e4:	77 0b       	sbc	r23, r23
 1e6:	65 95       	asr	r22
 1e8:	65 95       	asr	r22
 1ea:	07 2e       	mov	r0, r23
 1ec:	00 0c       	add	r0, r0
 1ee:	88 0b       	sbc	r24, r24
 1f0:	99 0b       	sbc	r25, r25
 1f2:	0e 94 09 01 	call	0x212	; 0x212 <__floatsisf>
 1f6:	20 e0       	ldi	r18, 0x00	; 0
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	40 e0       	ldi	r20, 0x00	; 0
 1fc:	50 e4       	ldi	r21, 0x40	; 64
 1fe:	0e 94 44 01 	call	0x288	; 0x288 <__gesf2>
 202:	18 16       	cp	r1, r24
 204:	14 f4       	brge	.+4      	; 0x20a <main+0x114>
			PORTB |= (1<<PORTB3);
 206:	2b 9a       	sbi	0x05, 3	; 5
 208:	a2 cf       	rjmp	.-188    	; 0x14e <main+0x58>
		}
		else{
			PORTB &=~ (1<<PORTB3);
 20a:	2b 98       	cbi	0x05, 3	; 5
 20c:	a0 cf       	rjmp	.-192    	; 0x14e <main+0x58>

0000020e <__floatunsisf>:
 20e:	e8 94       	clt
 210:	09 c0       	rjmp	.+18     	; 0x224 <__floatsisf+0x12>

00000212 <__floatsisf>:
 212:	97 fb       	bst	r25, 7
 214:	3e f4       	brtc	.+14     	; 0x224 <__floatsisf+0x12>
 216:	90 95       	com	r25
 218:	80 95       	com	r24
 21a:	70 95       	com	r23
 21c:	61 95       	neg	r22
 21e:	7f 4f       	sbci	r23, 0xFF	; 255
 220:	8f 4f       	sbci	r24, 0xFF	; 255
 222:	9f 4f       	sbci	r25, 0xFF	; 255
 224:	99 23       	and	r25, r25
 226:	a9 f0       	breq	.+42     	; 0x252 <__floatsisf+0x40>
 228:	f9 2f       	mov	r31, r25
 22a:	96 e9       	ldi	r25, 0x96	; 150
 22c:	bb 27       	eor	r27, r27
 22e:	93 95       	inc	r25
 230:	f6 95       	lsr	r31
 232:	87 95       	ror	r24
 234:	77 95       	ror	r23
 236:	67 95       	ror	r22
 238:	b7 95       	ror	r27
 23a:	f1 11       	cpse	r31, r1
 23c:	f8 cf       	rjmp	.-16     	; 0x22e <__floatsisf+0x1c>
 23e:	fa f4       	brpl	.+62     	; 0x27e <__floatsisf+0x6c>
 240:	bb 0f       	add	r27, r27
 242:	11 f4       	brne	.+4      	; 0x248 <__floatsisf+0x36>
 244:	60 ff       	sbrs	r22, 0
 246:	1b c0       	rjmp	.+54     	; 0x27e <__floatsisf+0x6c>
 248:	6f 5f       	subi	r22, 0xFF	; 255
 24a:	7f 4f       	sbci	r23, 0xFF	; 255
 24c:	8f 4f       	sbci	r24, 0xFF	; 255
 24e:	9f 4f       	sbci	r25, 0xFF	; 255
 250:	16 c0       	rjmp	.+44     	; 0x27e <__floatsisf+0x6c>
 252:	88 23       	and	r24, r24
 254:	11 f0       	breq	.+4      	; 0x25a <__floatsisf+0x48>
 256:	96 e9       	ldi	r25, 0x96	; 150
 258:	11 c0       	rjmp	.+34     	; 0x27c <__floatsisf+0x6a>
 25a:	77 23       	and	r23, r23
 25c:	21 f0       	breq	.+8      	; 0x266 <__floatsisf+0x54>
 25e:	9e e8       	ldi	r25, 0x8E	; 142
 260:	87 2f       	mov	r24, r23
 262:	76 2f       	mov	r23, r22
 264:	05 c0       	rjmp	.+10     	; 0x270 <__floatsisf+0x5e>
 266:	66 23       	and	r22, r22
 268:	71 f0       	breq	.+28     	; 0x286 <__floatsisf+0x74>
 26a:	96 e8       	ldi	r25, 0x86	; 134
 26c:	86 2f       	mov	r24, r22
 26e:	70 e0       	ldi	r23, 0x00	; 0
 270:	60 e0       	ldi	r22, 0x00	; 0
 272:	2a f0       	brmi	.+10     	; 0x27e <__floatsisf+0x6c>
 274:	9a 95       	dec	r25
 276:	66 0f       	add	r22, r22
 278:	77 1f       	adc	r23, r23
 27a:	88 1f       	adc	r24, r24
 27c:	da f7       	brpl	.-10     	; 0x274 <__floatsisf+0x62>
 27e:	88 0f       	add	r24, r24
 280:	96 95       	lsr	r25
 282:	87 95       	ror	r24
 284:	97 f9       	bld	r25, 7
 286:	08 95       	ret

00000288 <__gesf2>:
 288:	0e 94 49 01 	call	0x292	; 0x292 <__fp_cmp>
 28c:	08 f4       	brcc	.+2      	; 0x290 <__gesf2+0x8>
 28e:	8f ef       	ldi	r24, 0xFF	; 255
 290:	08 95       	ret

00000292 <__fp_cmp>:
 292:	99 0f       	add	r25, r25
 294:	00 08       	sbc	r0, r0
 296:	55 0f       	add	r21, r21
 298:	aa 0b       	sbc	r26, r26
 29a:	e0 e8       	ldi	r30, 0x80	; 128
 29c:	fe ef       	ldi	r31, 0xFE	; 254
 29e:	16 16       	cp	r1, r22
 2a0:	17 06       	cpc	r1, r23
 2a2:	e8 07       	cpc	r30, r24
 2a4:	f9 07       	cpc	r31, r25
 2a6:	c0 f0       	brcs	.+48     	; 0x2d8 <__fp_cmp+0x46>
 2a8:	12 16       	cp	r1, r18
 2aa:	13 06       	cpc	r1, r19
 2ac:	e4 07       	cpc	r30, r20
 2ae:	f5 07       	cpc	r31, r21
 2b0:	98 f0       	brcs	.+38     	; 0x2d8 <__fp_cmp+0x46>
 2b2:	62 1b       	sub	r22, r18
 2b4:	73 0b       	sbc	r23, r19
 2b6:	84 0b       	sbc	r24, r20
 2b8:	95 0b       	sbc	r25, r21
 2ba:	39 f4       	brne	.+14     	; 0x2ca <__fp_cmp+0x38>
 2bc:	0a 26       	eor	r0, r26
 2be:	61 f0       	breq	.+24     	; 0x2d8 <__fp_cmp+0x46>
 2c0:	23 2b       	or	r18, r19
 2c2:	24 2b       	or	r18, r20
 2c4:	25 2b       	or	r18, r21
 2c6:	21 f4       	brne	.+8      	; 0x2d0 <__fp_cmp+0x3e>
 2c8:	08 95       	ret
 2ca:	0a 26       	eor	r0, r26
 2cc:	09 f4       	brne	.+2      	; 0x2d0 <__fp_cmp+0x3e>
 2ce:	a1 40       	sbci	r26, 0x01	; 1
 2d0:	a6 95       	lsr	r26
 2d2:	8f ef       	ldi	r24, 0xFF	; 255
 2d4:	81 1d       	adc	r24, r1
 2d6:	81 1d       	adc	r24, r1
 2d8:	08 95       	ret

000002da <_exit>:
 2da:	f8 94       	cli

000002dc <__stop_program>:
 2dc:	ff cf       	rjmp	.-2      	; 0x2dc <__stop_program>
