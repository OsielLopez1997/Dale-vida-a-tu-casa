
Sala.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001dc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000693  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000607  00000000  00000000  00000953  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000228  00000000  00000000  00000f5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001184  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000033e  00000000  00000000  000011a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000003a  00000000  00000000  000014e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001520  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#define F_CPU 16000000L
#include "util/delay.h"

int main(void){
	
	DDRB = 0xff;
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	84 b9       	out	0x04, r24	; 4
	DDRD = 0x00;
  84:	1a b8       	out	0x0a, r1	; 10
	ADCSRA = 0x87;
  86:	87 e8       	ldi	r24, 0x87	; 135
  88:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
	ADMUX = 0x40;
  8c:	80 e4       	ldi	r24, 0x40	; 64
  8e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	float voltaje = 0;
	
	while (1){
		ADCSRA |= (1<<ADSC);
  92:	ca e7       	ldi	r28, 0x7A	; 122
  94:	d0 e0       	ldi	r29, 0x00	; 0
		while ((ADCSRA & (1<<ADIF))){
			ADCSRA |= (1<<ADIF);
			voltaje = (ADCL | (ADCH<<8))*5/1024;
  96:	0f 2e       	mov	r0, r31
  98:	f8 e7       	ldi	r31, 0x78	; 120
  9a:	ef 2e       	mov	r14, r31
  9c:	f1 2c       	mov	r15, r1
  9e:	f0 2d       	mov	r31, r0
  a0:	09 e7       	ldi	r16, 0x79	; 121
  a2:	10 e0       	ldi	r17, 0x00	; 0
			if (voltaje > 2.0){
				PORTB = 0b00000001;
  a4:	dd 24       	eor	r13, r13
  a6:	d3 94       	inc	r13
	ADCSRA = 0x87;
	ADMUX = 0x40;
	float voltaje = 0;
	
	while (1){
		ADCSRA |= (1<<ADSC);
  a8:	88 81       	ld	r24, Y
  aa:	80 64       	ori	r24, 0x40	; 64
  ac:	88 83       	st	Y, r24
		while ((ADCSRA & (1<<ADIF))){
  ae:	2a c0       	rjmp	.+84     	; 0x104 <main+0x84>
			ADCSRA |= (1<<ADIF);
  b0:	88 81       	ld	r24, Y
  b2:	80 61       	ori	r24, 0x10	; 16
  b4:	88 83       	st	Y, r24
			voltaje = (ADCL | (ADCH<<8))*5/1024;
  b6:	f7 01       	movw	r30, r14
  b8:	60 81       	ld	r22, Z
  ba:	f8 01       	movw	r30, r16
  bc:	80 81       	ld	r24, Z
			if (voltaje > 2.0){
  be:	70 e0       	ldi	r23, 0x00	; 0
  c0:	78 2b       	or	r23, r24
  c2:	cb 01       	movw	r24, r22
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	88 0f       	add	r24, r24
  ca:	99 1f       	adc	r25, r25
  cc:	68 0f       	add	r22, r24
  ce:	79 1f       	adc	r23, r25
  d0:	77 23       	and	r23, r23
  d2:	14 f4       	brge	.+4      	; 0xd8 <main+0x58>
  d4:	61 50       	subi	r22, 0x01	; 1
  d6:	7c 4f       	sbci	r23, 0xFC	; 252
  d8:	67 2f       	mov	r22, r23
  da:	77 0f       	add	r23, r23
  dc:	77 0b       	sbc	r23, r23
  de:	65 95       	asr	r22
  e0:	65 95       	asr	r22
  e2:	07 2e       	mov	r0, r23
  e4:	00 0c       	add	r0, r0
  e6:	88 0b       	sbc	r24, r24
  e8:	99 0b       	sbc	r25, r25
  ea:	0e 94 88 00 	call	0x110	; 0x110 <__floatsisf>
  ee:	20 e0       	ldi	r18, 0x00	; 0
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	40 e0       	ldi	r20, 0x00	; 0
  f4:	50 e4       	ldi	r21, 0x40	; 64
  f6:	0e 94 c3 00 	call	0x186	; 0x186 <__gesf2>
  fa:	18 16       	cp	r1, r24
  fc:	14 f4       	brge	.+4      	; 0x102 <main+0x82>
				PORTB = 0b00000001;
  fe:	d5 b8       	out	0x05, r13	; 5
 100:	01 c0       	rjmp	.+2      	; 0x104 <main+0x84>
			} 
			else{
				PORTB = 0b00000000;
 102:	15 b8       	out	0x05, r1	; 5
	ADMUX = 0x40;
	float voltaje = 0;
	
	while (1){
		ADCSRA |= (1<<ADSC);
		while ((ADCSRA & (1<<ADIF))){
 104:	88 81       	ld	r24, Y
 106:	84 fd       	sbrc	r24, 4
 108:	d3 cf       	rjmp	.-90     	; 0xb0 <main+0x30>
 10a:	ce cf       	rjmp	.-100    	; 0xa8 <main+0x28>

0000010c <__floatunsisf>:
 10c:	e8 94       	clt
 10e:	09 c0       	rjmp	.+18     	; 0x122 <__floatsisf+0x12>

00000110 <__floatsisf>:
 110:	97 fb       	bst	r25, 7
 112:	3e f4       	brtc	.+14     	; 0x122 <__floatsisf+0x12>
 114:	90 95       	com	r25
 116:	80 95       	com	r24
 118:	70 95       	com	r23
 11a:	61 95       	neg	r22
 11c:	7f 4f       	sbci	r23, 0xFF	; 255
 11e:	8f 4f       	sbci	r24, 0xFF	; 255
 120:	9f 4f       	sbci	r25, 0xFF	; 255
 122:	99 23       	and	r25, r25
 124:	a9 f0       	breq	.+42     	; 0x150 <__floatsisf+0x40>
 126:	f9 2f       	mov	r31, r25
 128:	96 e9       	ldi	r25, 0x96	; 150
 12a:	bb 27       	eor	r27, r27
 12c:	93 95       	inc	r25
 12e:	f6 95       	lsr	r31
 130:	87 95       	ror	r24
 132:	77 95       	ror	r23
 134:	67 95       	ror	r22
 136:	b7 95       	ror	r27
 138:	f1 11       	cpse	r31, r1
 13a:	f8 cf       	rjmp	.-16     	; 0x12c <__floatsisf+0x1c>
 13c:	fa f4       	brpl	.+62     	; 0x17c <__floatsisf+0x6c>
 13e:	bb 0f       	add	r27, r27
 140:	11 f4       	brne	.+4      	; 0x146 <__floatsisf+0x36>
 142:	60 ff       	sbrs	r22, 0
 144:	1b c0       	rjmp	.+54     	; 0x17c <__floatsisf+0x6c>
 146:	6f 5f       	subi	r22, 0xFF	; 255
 148:	7f 4f       	sbci	r23, 0xFF	; 255
 14a:	8f 4f       	sbci	r24, 0xFF	; 255
 14c:	9f 4f       	sbci	r25, 0xFF	; 255
 14e:	16 c0       	rjmp	.+44     	; 0x17c <__floatsisf+0x6c>
 150:	88 23       	and	r24, r24
 152:	11 f0       	breq	.+4      	; 0x158 <__floatsisf+0x48>
 154:	96 e9       	ldi	r25, 0x96	; 150
 156:	11 c0       	rjmp	.+34     	; 0x17a <__floatsisf+0x6a>
 158:	77 23       	and	r23, r23
 15a:	21 f0       	breq	.+8      	; 0x164 <__floatsisf+0x54>
 15c:	9e e8       	ldi	r25, 0x8E	; 142
 15e:	87 2f       	mov	r24, r23
 160:	76 2f       	mov	r23, r22
 162:	05 c0       	rjmp	.+10     	; 0x16e <__floatsisf+0x5e>
 164:	66 23       	and	r22, r22
 166:	71 f0       	breq	.+28     	; 0x184 <__floatsisf+0x74>
 168:	96 e8       	ldi	r25, 0x86	; 134
 16a:	86 2f       	mov	r24, r22
 16c:	70 e0       	ldi	r23, 0x00	; 0
 16e:	60 e0       	ldi	r22, 0x00	; 0
 170:	2a f0       	brmi	.+10     	; 0x17c <__floatsisf+0x6c>
 172:	9a 95       	dec	r25
 174:	66 0f       	add	r22, r22
 176:	77 1f       	adc	r23, r23
 178:	88 1f       	adc	r24, r24
 17a:	da f7       	brpl	.-10     	; 0x172 <__floatsisf+0x62>
 17c:	88 0f       	add	r24, r24
 17e:	96 95       	lsr	r25
 180:	87 95       	ror	r24
 182:	97 f9       	bld	r25, 7
 184:	08 95       	ret

00000186 <__gesf2>:
 186:	0e 94 c8 00 	call	0x190	; 0x190 <__fp_cmp>
 18a:	08 f4       	brcc	.+2      	; 0x18e <__gesf2+0x8>
 18c:	8f ef       	ldi	r24, 0xFF	; 255
 18e:	08 95       	ret

00000190 <__fp_cmp>:
 190:	99 0f       	add	r25, r25
 192:	00 08       	sbc	r0, r0
 194:	55 0f       	add	r21, r21
 196:	aa 0b       	sbc	r26, r26
 198:	e0 e8       	ldi	r30, 0x80	; 128
 19a:	fe ef       	ldi	r31, 0xFE	; 254
 19c:	16 16       	cp	r1, r22
 19e:	17 06       	cpc	r1, r23
 1a0:	e8 07       	cpc	r30, r24
 1a2:	f9 07       	cpc	r31, r25
 1a4:	c0 f0       	brcs	.+48     	; 0x1d6 <__fp_cmp+0x46>
 1a6:	12 16       	cp	r1, r18
 1a8:	13 06       	cpc	r1, r19
 1aa:	e4 07       	cpc	r30, r20
 1ac:	f5 07       	cpc	r31, r21
 1ae:	98 f0       	brcs	.+38     	; 0x1d6 <__fp_cmp+0x46>
 1b0:	62 1b       	sub	r22, r18
 1b2:	73 0b       	sbc	r23, r19
 1b4:	84 0b       	sbc	r24, r20
 1b6:	95 0b       	sbc	r25, r21
 1b8:	39 f4       	brne	.+14     	; 0x1c8 <__fp_cmp+0x38>
 1ba:	0a 26       	eor	r0, r26
 1bc:	61 f0       	breq	.+24     	; 0x1d6 <__fp_cmp+0x46>
 1be:	23 2b       	or	r18, r19
 1c0:	24 2b       	or	r18, r20
 1c2:	25 2b       	or	r18, r21
 1c4:	21 f4       	brne	.+8      	; 0x1ce <__fp_cmp+0x3e>
 1c6:	08 95       	ret
 1c8:	0a 26       	eor	r0, r26
 1ca:	09 f4       	brne	.+2      	; 0x1ce <__fp_cmp+0x3e>
 1cc:	a1 40       	sbci	r26, 0x01	; 1
 1ce:	a6 95       	lsr	r26
 1d0:	8f ef       	ldi	r24, 0xFF	; 255
 1d2:	81 1d       	adc	r24, r1
 1d4:	81 1d       	adc	r24, r1
 1d6:	08 95       	ret

000001d8 <_exit>:
 1d8:	f8 94       	cli

000001da <__stop_program>:
 1da:	ff cf       	rjmp	.-2      	; 0x1da <__stop_program>
