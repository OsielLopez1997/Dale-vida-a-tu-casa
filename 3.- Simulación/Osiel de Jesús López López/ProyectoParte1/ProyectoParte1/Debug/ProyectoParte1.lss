
ProyectoParte1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000262  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002b6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000071e  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066d  00000000  00000000  00000a66  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000030c  00000000  00000000  000010d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000013e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a6  00000000  00000000  00001404  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000082  00000000  00000000  000017aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000182c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 2f 01 	jmp	0x25e	; 0x25e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#define F_CPU 16000000L
#include "util/delay.h"

int main(void){
	
	DDRB = 0xff;
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	84 b9       	out	0x04, r24	; 4
	DDRD = 0x00;
  84:	1a b8       	out	0x0a, r1	; 10
	DDRC = 0x00;
  86:	17 b8       	out	0x07, r1	; 7
	ADCSRA = 0x87;
  88:	87 e8       	ldi	r24, 0x87	; 135
  8a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
	ADMUX = 0x40;
  8e:	80 e4       	ldi	r24, 0x40	; 64
  90:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	float voltaje = 0;
	
	PORTB |= (1<<9);
  94:	85 b1       	in	r24, 0x05	; 5
  96:	85 b9       	out	0x05, r24	; 5
	TCCR1A = (1<<COM1A1)|(0<<COM1A0)|(0<<COM1B1)|(0<<COM1B0)|(1<<WGM11)|(0<<WGM00);
  98:	82 e8       	ldi	r24, 0x82	; 130
  9a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B = (0<<ICNC1)|(0<<ICES1)|(1<<WGM13)|(1<<WGM12)|(0<<CS12)|(1<<CS11)|(0<<CS10);
  9e:	8a e1       	ldi	r24, 0x1A	; 26
  a0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	TCCR1C = (0<<FOC1A)|(0<<FOC1B);
  a4:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__DATA_REGION_ORIGIN__+0x22>
	TCNT1 = 0;
  a8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
  ac:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	OCR1A = 0;
  b0:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
  b4:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	ICR1 = 27647;
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	9b e6       	ldi	r25, 0x6B	; 107
  bc:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
  c0:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
	TIMSK1 = 0;
  c4:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
	TIFR1 = 0;
  c8:	16 ba       	out	0x16, r1	; 22
	
	while (1){
		
		if (PIND & 0b00000001){
			PORTB = (1<<2);
  ca:	68 94       	set
  cc:	77 24       	eor	r7, r7
  ce:	72 f8       	bld	r7, 2
		if (PIND & 0b00000010){
			PORTB &=~ (1<<2);
		}
		
		if (PIND & 0b00000100){
			OCR1A = 4000;
  d0:	0f 2e       	mov	r0, r31
  d2:	f8 e8       	ldi	r31, 0x88	; 136
  d4:	cf 2e       	mov	r12, r31
  d6:	d1 2c       	mov	r13, r1
  d8:	f0 2d       	mov	r31, r0
  da:	0f 2e       	mov	r0, r31
  dc:	f0 ea       	ldi	r31, 0xA0	; 160
  de:	8f 2e       	mov	r8, r31
  e0:	ff e0       	ldi	r31, 0x0F	; 15
  e2:	9f 2e       	mov	r9, r31
  e4:	f0 2d       	mov	r31, r0
			_delay_ms(5000);
			OCR1A = 1675;
  e6:	0f 2e       	mov	r0, r31
  e8:	fb e8       	ldi	r31, 0x8B	; 139
  ea:	af 2e       	mov	r10, r31
  ec:	f6 e0       	ldi	r31, 0x06	; 6
  ee:	bf 2e       	mov	r11, r31
  f0:	f0 2d       	mov	r31, r0
		}
		ADCSRA |= (1<<ADSC);
  f2:	ca e7       	ldi	r28, 0x7A	; 122
  f4:	d0 e0       	ldi	r29, 0x00	; 0
		while ((ADCSRA & (1<<ADIF))){
			ADCSRA |= (1<<ADIF);
			voltaje = (ADCL | (ADCH<<8))*5/1024;
  f6:	0f 2e       	mov	r0, r31
  f8:	f8 e7       	ldi	r31, 0x78	; 120
  fa:	ef 2e       	mov	r14, r31
  fc:	f1 2c       	mov	r15, r1
  fe:	f0 2d       	mov	r31, r0
 100:	09 e7       	ldi	r16, 0x79	; 121
 102:	10 e0       	ldi	r17, 0x00	; 0
	TIMSK1 = 0;
	TIFR1 = 0;
	
	while (1){
		
		if (PIND & 0b00000001){
 104:	48 99       	sbic	0x09, 0	; 9
			PORTB = (1<<2);
 106:	75 b8       	out	0x05, r7	; 5
		}
		if (PIND & 0b00000010){
 108:	49 99       	sbic	0x09, 1	; 9
			PORTB &=~ (1<<2);
 10a:	2a 98       	cbi	0x05, 2	; 5
		}
		
		if (PIND & 0b00000100){
 10c:	4a 9b       	sbis	0x09, 2	; 9
 10e:	0f c0       	rjmp	.+30     	; 0x12e <main+0xae>
			OCR1A = 4000;
 110:	f6 01       	movw	r30, r12
 112:	91 82       	std	Z+1, r9	; 0x01
 114:	80 82       	st	Z, r8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	ff ef       	ldi	r31, 0xFF	; 255
 118:	23 e2       	ldi	r18, 0x23	; 35
 11a:	84 ef       	ldi	r24, 0xF4	; 244
 11c:	f1 50       	subi	r31, 0x01	; 1
 11e:	20 40       	sbci	r18, 0x00	; 0
 120:	80 40       	sbci	r24, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <main+0x9c>
 124:	00 c0       	rjmp	.+0      	; 0x126 <main+0xa6>
 126:	00 00       	nop
			_delay_ms(5000);
			OCR1A = 1675;
 128:	f6 01       	movw	r30, r12
 12a:	b1 82       	std	Z+1, r11	; 0x01
 12c:	a0 82       	st	Z, r10
		}
		ADCSRA |= (1<<ADSC);
 12e:	88 81       	ld	r24, Y
 130:	80 64       	ori	r24, 0x40	; 64
 132:	88 83       	st	Y, r24
		while ((ADCSRA & (1<<ADIF))){
 134:	2a c0       	rjmp	.+84     	; 0x18a <main+0x10a>
			ADCSRA |= (1<<ADIF);
 136:	88 81       	ld	r24, Y
 138:	80 61       	ori	r24, 0x10	; 16
 13a:	88 83       	st	Y, r24
			voltaje = (ADCL | (ADCH<<8))*5/1024;
 13c:	f7 01       	movw	r30, r14
 13e:	60 81       	ld	r22, Z
 140:	f8 01       	movw	r30, r16
 142:	80 81       	ld	r24, Z
			if (voltaje > 2.0){
 144:	70 e0       	ldi	r23, 0x00	; 0
 146:	78 2b       	or	r23, r24
 148:	cb 01       	movw	r24, r22
 14a:	88 0f       	add	r24, r24
 14c:	99 1f       	adc	r25, r25
 14e:	88 0f       	add	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	68 0f       	add	r22, r24
 154:	79 1f       	adc	r23, r25
 156:	77 23       	and	r23, r23
 158:	14 f4       	brge	.+4      	; 0x15e <main+0xde>
 15a:	61 50       	subi	r22, 0x01	; 1
 15c:	7c 4f       	sbci	r23, 0xFC	; 252
 15e:	67 2f       	mov	r22, r23
 160:	77 0f       	add	r23, r23
 162:	77 0b       	sbc	r23, r23
 164:	65 95       	asr	r22
 166:	65 95       	asr	r22
 168:	07 2e       	mov	r0, r23
 16a:	00 0c       	add	r0, r0
 16c:	88 0b       	sbc	r24, r24
 16e:	99 0b       	sbc	r25, r25
 170:	0e 94 cb 00 	call	0x196	; 0x196 <__floatsisf>
 174:	20 e0       	ldi	r18, 0x00	; 0
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	40 e0       	ldi	r20, 0x00	; 0
 17a:	50 e4       	ldi	r21, 0x40	; 64
 17c:	0e 94 06 01 	call	0x20c	; 0x20c <__gesf2>
 180:	18 16       	cp	r1, r24
 182:	14 f4       	brge	.+4      	; 0x188 <main+0x108>
				PORTB |= (1<<0);
 184:	28 9a       	sbi	0x05, 0	; 5
 186:	01 c0       	rjmp	.+2      	; 0x18a <main+0x10a>
			}
			else{
				PORTB &=~ (1<<0);
 188:	28 98       	cbi	0x05, 0	; 5
			OCR1A = 4000;
			_delay_ms(5000);
			OCR1A = 1675;
		}
		ADCSRA |= (1<<ADSC);
		while ((ADCSRA & (1<<ADIF))){
 18a:	88 81       	ld	r24, Y
 18c:	84 fd       	sbrc	r24, 4
 18e:	d3 cf       	rjmp	.-90     	; 0x136 <main+0xb6>
 190:	b9 cf       	rjmp	.-142    	; 0x104 <main+0x84>

00000192 <__floatunsisf>:
 192:	e8 94       	clt
 194:	09 c0       	rjmp	.+18     	; 0x1a8 <__floatsisf+0x12>

00000196 <__floatsisf>:
 196:	97 fb       	bst	r25, 7
 198:	3e f4       	brtc	.+14     	; 0x1a8 <__floatsisf+0x12>
 19a:	90 95       	com	r25
 19c:	80 95       	com	r24
 19e:	70 95       	com	r23
 1a0:	61 95       	neg	r22
 1a2:	7f 4f       	sbci	r23, 0xFF	; 255
 1a4:	8f 4f       	sbci	r24, 0xFF	; 255
 1a6:	9f 4f       	sbci	r25, 0xFF	; 255
 1a8:	99 23       	and	r25, r25
 1aa:	a9 f0       	breq	.+42     	; 0x1d6 <__floatsisf+0x40>
 1ac:	f9 2f       	mov	r31, r25
 1ae:	96 e9       	ldi	r25, 0x96	; 150
 1b0:	bb 27       	eor	r27, r27
 1b2:	93 95       	inc	r25
 1b4:	f6 95       	lsr	r31
 1b6:	87 95       	ror	r24
 1b8:	77 95       	ror	r23
 1ba:	67 95       	ror	r22
 1bc:	b7 95       	ror	r27
 1be:	f1 11       	cpse	r31, r1
 1c0:	f8 cf       	rjmp	.-16     	; 0x1b2 <__floatsisf+0x1c>
 1c2:	fa f4       	brpl	.+62     	; 0x202 <__floatsisf+0x6c>
 1c4:	bb 0f       	add	r27, r27
 1c6:	11 f4       	brne	.+4      	; 0x1cc <__floatsisf+0x36>
 1c8:	60 ff       	sbrs	r22, 0
 1ca:	1b c0       	rjmp	.+54     	; 0x202 <__floatsisf+0x6c>
 1cc:	6f 5f       	subi	r22, 0xFF	; 255
 1ce:	7f 4f       	sbci	r23, 0xFF	; 255
 1d0:	8f 4f       	sbci	r24, 0xFF	; 255
 1d2:	9f 4f       	sbci	r25, 0xFF	; 255
 1d4:	16 c0       	rjmp	.+44     	; 0x202 <__floatsisf+0x6c>
 1d6:	88 23       	and	r24, r24
 1d8:	11 f0       	breq	.+4      	; 0x1de <__floatsisf+0x48>
 1da:	96 e9       	ldi	r25, 0x96	; 150
 1dc:	11 c0       	rjmp	.+34     	; 0x200 <__floatsisf+0x6a>
 1de:	77 23       	and	r23, r23
 1e0:	21 f0       	breq	.+8      	; 0x1ea <__floatsisf+0x54>
 1e2:	9e e8       	ldi	r25, 0x8E	; 142
 1e4:	87 2f       	mov	r24, r23
 1e6:	76 2f       	mov	r23, r22
 1e8:	05 c0       	rjmp	.+10     	; 0x1f4 <__floatsisf+0x5e>
 1ea:	66 23       	and	r22, r22
 1ec:	71 f0       	breq	.+28     	; 0x20a <__floatsisf+0x74>
 1ee:	96 e8       	ldi	r25, 0x86	; 134
 1f0:	86 2f       	mov	r24, r22
 1f2:	70 e0       	ldi	r23, 0x00	; 0
 1f4:	60 e0       	ldi	r22, 0x00	; 0
 1f6:	2a f0       	brmi	.+10     	; 0x202 <__floatsisf+0x6c>
 1f8:	9a 95       	dec	r25
 1fa:	66 0f       	add	r22, r22
 1fc:	77 1f       	adc	r23, r23
 1fe:	88 1f       	adc	r24, r24
 200:	da f7       	brpl	.-10     	; 0x1f8 <__floatsisf+0x62>
 202:	88 0f       	add	r24, r24
 204:	96 95       	lsr	r25
 206:	87 95       	ror	r24
 208:	97 f9       	bld	r25, 7
 20a:	08 95       	ret

0000020c <__gesf2>:
 20c:	0e 94 0b 01 	call	0x216	; 0x216 <__fp_cmp>
 210:	08 f4       	brcc	.+2      	; 0x214 <__gesf2+0x8>
 212:	8f ef       	ldi	r24, 0xFF	; 255
 214:	08 95       	ret

00000216 <__fp_cmp>:
 216:	99 0f       	add	r25, r25
 218:	00 08       	sbc	r0, r0
 21a:	55 0f       	add	r21, r21
 21c:	aa 0b       	sbc	r26, r26
 21e:	e0 e8       	ldi	r30, 0x80	; 128
 220:	fe ef       	ldi	r31, 0xFE	; 254
 222:	16 16       	cp	r1, r22
 224:	17 06       	cpc	r1, r23
 226:	e8 07       	cpc	r30, r24
 228:	f9 07       	cpc	r31, r25
 22a:	c0 f0       	brcs	.+48     	; 0x25c <__fp_cmp+0x46>
 22c:	12 16       	cp	r1, r18
 22e:	13 06       	cpc	r1, r19
 230:	e4 07       	cpc	r30, r20
 232:	f5 07       	cpc	r31, r21
 234:	98 f0       	brcs	.+38     	; 0x25c <__fp_cmp+0x46>
 236:	62 1b       	sub	r22, r18
 238:	73 0b       	sbc	r23, r19
 23a:	84 0b       	sbc	r24, r20
 23c:	95 0b       	sbc	r25, r21
 23e:	39 f4       	brne	.+14     	; 0x24e <__fp_cmp+0x38>
 240:	0a 26       	eor	r0, r26
 242:	61 f0       	breq	.+24     	; 0x25c <__fp_cmp+0x46>
 244:	23 2b       	or	r18, r19
 246:	24 2b       	or	r18, r20
 248:	25 2b       	or	r18, r21
 24a:	21 f4       	brne	.+8      	; 0x254 <__fp_cmp+0x3e>
 24c:	08 95       	ret
 24e:	0a 26       	eor	r0, r26
 250:	09 f4       	brne	.+2      	; 0x254 <__fp_cmp+0x3e>
 252:	a1 40       	sbci	r26, 0x01	; 1
 254:	a6 95       	lsr	r26
 256:	8f ef       	ldi	r24, 0xFF	; 255
 258:	81 1d       	adc	r24, r1
 25a:	81 1d       	adc	r24, r1
 25c:	08 95       	ret

0000025e <_exit>:
 25e:	f8 94       	cli

00000260 <__stop_program>:
 260:	ff cf       	rjmp	.-2      	; 0x260 <__stop_program>
