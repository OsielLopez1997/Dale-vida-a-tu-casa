
servo atmel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000100  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000743  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000068a  00000000  00000000  00000927  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b3  00000000  00000000  00000fb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001264  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b6  00000000  00000000  00001288  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  0000163e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001686  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 7e 00 	jmp	0xfc	; 0xfc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>
#include "util/delay.h"

int main(void){
	
	DDRB = 0xff;  // puesrto b como salida
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<9); 
  84:	85 b1       	in	r24, 0x05	; 5
  86:	85 b9       	out	0x05, r24	; 5
	TCCR1A = (1<<COM1A1)|(0<<COM1A0)|(0<<COM1B1)|(0<<COM1B0)|(1<<WGM11)|(0<<WGM00); // configuracion registro del timer 1, para elegir la salida pwm
  88:	82 e8       	ldi	r24, 0x82	; 130
  8a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B = (0<<ICNC1)|(0<<ICES1)|(1<<WGM13)|(1<<WGM12)|(0<<CS12)|(1<<CS11)|(0<<CS10); // configuracion del timer que contiene el activado o desactivado del mismo
  8e:	8a e1       	ldi	r24, 0x1A	; 26
  90:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	TCCR1C = (0<<FOC1A)|(0<<FOC1B);
  94:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__DATA_REGION_ORIGIN__+0x22>
	TCNT1 = 0;
  98:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
  9c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	OCR1A = 0; // valor salida del pwm por el pin OCR1A
  a0:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
  a4:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	OCR1B = 0;
  a8:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
  ac:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
	ICR1 = 27647; // Valor top del pwm para obtener una frecuencia de 50hz
  b0:	8f ef       	ldi	r24, 0xFF	; 255
  b2:	9b e6       	ldi	r25, 0x6B	; 107
  b4:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
  b8:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
	TIMSK1 = 0; // se deshabilitan interrupciones
  bc:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
	TIFR1 = 0;
  c0:	16 ba       	out	0x16, r1	; 22
	
	while(1){
	
		OCR1A = 1675; // valor de la salida pwm para que el servo permanezca en cero grados
  c2:	e8 e8       	ldi	r30, 0x88	; 136
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	2b e8       	ldi	r18, 0x8B	; 139
  c8:	36 e0       	ldi	r19, 0x06	; 6
		_delay_ms(2000);
		OCR1A = 4000; // valor de la salida pwm para que el servo permanezca en noventa grados
  ca:	80 ea       	ldi	r24, 0xA0	; 160
  cc:	9f e0       	ldi	r25, 0x0F	; 15
	TIMSK1 = 0; // se deshabilitan interrupciones
	TIFR1 = 0;
	
	while(1){
	
		OCR1A = 1675; // valor de la salida pwm para que el servo permanezca en cero grados
  ce:	31 83       	std	Z+1, r19	; 0x01
  d0:	20 83       	st	Z, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	4f ef       	ldi	r20, 0xFF	; 255
  d4:	57 ea       	ldi	r21, 0xA7	; 167
  d6:	61 e6       	ldi	r22, 0x61	; 97
  d8:	41 50       	subi	r20, 0x01	; 1
  da:	50 40       	sbci	r21, 0x00	; 0
  dc:	60 40       	sbci	r22, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <main+0x58>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <main+0x62>
  e2:	00 00       	nop
		_delay_ms(2000);
		OCR1A = 4000; // valor de la salida pwm para que el servo permanezca en noventa grados
  e4:	91 83       	std	Z+1, r25	; 0x01
  e6:	80 83       	st	Z, r24
  e8:	4f ef       	ldi	r20, 0xFF	; 255
  ea:	57 ea       	ldi	r21, 0xA7	; 167
  ec:	61 e6       	ldi	r22, 0x61	; 97
  ee:	41 50       	subi	r20, 0x01	; 1
  f0:	50 40       	sbci	r21, 0x00	; 0
  f2:	60 40       	sbci	r22, 0x00	; 0
  f4:	e1 f7       	brne	.-8      	; 0xee <main+0x6e>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <main+0x78>
  f8:	00 00       	nop
  fa:	e9 cf       	rjmp	.-46     	; 0xce <main+0x4e>

000000fc <_exit>:
  fc:	f8 94       	cli

000000fe <__stop_program>:
  fe:	ff cf       	rjmp	.-2      	; 0xfe <__stop_program>
